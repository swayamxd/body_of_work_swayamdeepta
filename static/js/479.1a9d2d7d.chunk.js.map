{"version":3,"file":"static/js/479.1a9d2d7d.chunk.js","mappings":"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","sources":["../node_modules/web-vitals/dist/modules/lib/bfcache.js","../node_modules/web-vitals/dist/modules/lib/bindReporter.js","../node_modules/web-vitals/dist/modules/lib/getActivationStart.js","../node_modules/web-vitals/dist/modules/lib/getNavigationEntry.js","../node_modules/web-vitals/dist/modules/lib/initMetric.js","../node_modules/web-vitals/dist/modules/lib/generateUniqueID.js","../node_modules/web-vitals/dist/modules/lib/observe.js","../node_modules/web-vitals/dist/modules/lib/onHidden.js","../node_modules/web-vitals/dist/modules/lib/runOnce.js","../node_modules/web-vitals/dist/modules/lib/whenActivated.js","../node_modules/web-vitals/dist/modules/lib/whenIdle.js","../node_modules/web-vitals/dist/modules/lib/polyfills/interactionCountPolyfill.js","../node_modules/web-vitals/dist/modules/lib/interactions.js","../node_modules/web-vitals/dist/modules/onINP.js"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet bfcacheRestoreTime = -1;\nexport const getBFCacheRestoreTime = () => bfcacheRestoreTime;\nexport const onBFCacheRestore = (cb) => {\n    addEventListener('pageshow', (event) => {\n        if (event.persisted) {\n            bfcacheRestoreTime = event.timeStamp;\n            cb(event);\n        }\n    }, true);\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst getRating = (value, thresholds) => {\n    if (value > thresholds[1]) {\n        return 'poor';\n    }\n    if (value > thresholds[0]) {\n        return 'needs-improvement';\n    }\n    return 'good';\n};\nexport const bindReporter = (callback, metric, thresholds, reportAllChanges) => {\n    let prevValue;\n    let delta;\n    return (forceReport) => {\n        if (metric.value >= 0) {\n            if (forceReport || reportAllChanges) {\n                delta = metric.value - (prevValue || 0);\n                // Report the metric if there's a non-zero delta or if no previous\n                // value exists (which can happen in the case of the document becoming\n                // hidden when the metric value is 0).\n                // See: https://github.com/GoogleChrome/web-vitals/issues/14\n                if (delta || prevValue === undefined) {\n                    prevValue = metric.value;\n                    metric.delta = delta;\n                    metric.rating = getRating(metric.value, thresholds);\n                    callback(metric);\n                }\n            }\n        }\n    };\n};\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getNavigationEntry } from './getNavigationEntry.js';\nexport const getActivationStart = () => {\n    const navEntry = getNavigationEntry();\n    return (navEntry && navEntry.activationStart) || 0;\n};\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const getNavigationEntry = () => {\n    const navigationEntry = self.performance &&\n        performance.getEntriesByType &&\n        performance.getEntriesByType('navigation')[0];\n    // Check to ensure the `responseStart` property is present and valid.\n    // In some cases no value is reported by the browser (for\n    // privacy/security reasons), and in other cases (bugs) the value is\n    // negative or is larger than the current page time. Ignore these cases:\n    // https://github.com/GoogleChrome/web-vitals/issues/137\n    // https://github.com/GoogleChrome/web-vitals/issues/162\n    // https://github.com/GoogleChrome/web-vitals/issues/275\n    if (navigationEntry &&\n        navigationEntry.responseStart > 0 &&\n        navigationEntry.responseStart < performance.now()) {\n        return navigationEntry;\n    }\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getBFCacheRestoreTime } from './bfcache.js';\nimport { generateUniqueID } from './generateUniqueID.js';\nimport { getActivationStart } from './getActivationStart.js';\nimport { getNavigationEntry } from './getNavigationEntry.js';\nexport const initMetric = (name, value) => {\n    const navEntry = getNavigationEntry();\n    let navigationType = 'navigate';\n    if (getBFCacheRestoreTime() >= 0) {\n        navigationType = 'back-forward-cache';\n    }\n    else if (navEntry) {\n        if (document.prerendering || getActivationStart() > 0) {\n            navigationType = 'prerender';\n        }\n        else if (document.wasDiscarded) {\n            navigationType = 'restore';\n        }\n        else if (navEntry.type) {\n            navigationType = navEntry.type.replace(/_/g, '-');\n        }\n    }\n    // Use `entries` type specific for the metric.\n    const entries = [];\n    return {\n        name,\n        value: typeof value === 'undefined' ? -1 : value,\n        rating: 'good', // If needed, will be updated when reported. `const` to keep the type from widening to `string`.\n        delta: 0,\n        entries,\n        id: generateUniqueID(),\n        navigationType,\n    };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Performantly generate a unique, 30-char string by combining a version\n * number, the current timestamp with a 13-digit number integer.\n * @return {string}\n */\nexport const generateUniqueID = () => {\n    return `v4-${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport const observe = (type, callback, opts) => {\n    try {\n        if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n            const po = new PerformanceObserver((list) => {\n                // Delay by a microtask to workaround a bug in Safari where the\n                // callback is invoked immediately, rather than in a separate task.\n                // See: https://github.com/GoogleChrome/web-vitals/issues/277\n                Promise.resolve().then(() => {\n                    callback(list.getEntries());\n                });\n            });\n            po.observe(Object.assign({\n                type,\n                buffered: true,\n            }, opts || {}));\n            return po;\n        }\n    }\n    catch (e) {\n        // Do nothing.\n    }\n    return;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const onHidden = (cb) => {\n    document.addEventListener('visibilitychange', () => {\n        if (document.visibilityState === 'hidden') {\n            cb();\n        }\n    });\n};\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const runOnce = (cb) => {\n    let called = false;\n    return () => {\n        if (!called) {\n            cb();\n            called = true;\n        }\n    };\n};\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const whenActivated = (callback) => {\n    if (document.prerendering) {\n        addEventListener('prerenderingchange', () => callback(), true);\n    }\n    else {\n        callback();\n    }\n};\n","/*\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { onHidden } from './onHidden.js';\nimport { runOnce } from './runOnce.js';\n/**\n * Runs the passed callback during the next idle period, or immediately\n * if the browser's visibility state is (or becomes) hidden.\n */\nexport const whenIdle = (cb) => {\n    const rIC = self.requestIdleCallback || self.setTimeout;\n    let handle = -1;\n    cb = runOnce(cb);\n    // If the document is hidden, run the callback immediately, otherwise\n    // race an idle callback with the next `visibilitychange` event.\n    if (document.visibilityState === 'hidden') {\n        cb();\n    }\n    else {\n        handle = rIC(cb);\n        onHidden(cb);\n    }\n    return handle;\n};\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { observe } from '../observe.js';\nlet interactionCountEstimate = 0;\nlet minKnownInteractionId = Infinity;\nlet maxKnownInteractionId = 0;\nconst updateEstimate = (entries) => {\n    entries.forEach((e) => {\n        if (e.interactionId) {\n            minKnownInteractionId = Math.min(minKnownInteractionId, e.interactionId);\n            maxKnownInteractionId = Math.max(maxKnownInteractionId, e.interactionId);\n            interactionCountEstimate = maxKnownInteractionId\n                ? (maxKnownInteractionId - minKnownInteractionId) / 7 + 1\n                : 0;\n        }\n    });\n};\nlet po;\n/**\n * Returns the `interactionCount` value using the native API (if available)\n * or the polyfill estimate in this module.\n */\nexport const getInteractionCount = () => {\n    return po ? interactionCountEstimate : performance.interactionCount || 0;\n};\n/**\n * Feature detects native support or initializes the polyfill if needed.\n */\nexport const initInteractionCountPolyfill = () => {\n    if ('interactionCount' in performance || po)\n        return;\n    po = observe('event', updateEstimate, {\n        type: 'event',\n        buffered: true,\n        durationThreshold: 0,\n    });\n};\n","/*\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getInteractionCount } from './polyfills/interactionCountPolyfill.js';\n// A list of longest interactions on the page (by latency) sorted so the\n// longest one is first. The list is at most MAX_INTERACTIONS_TO_CONSIDER long.\nexport const longestInteractionList = [];\n// A mapping of longest interactions by their interaction ID.\n// This is used for faster lookup.\nexport const longestInteractionMap = new Map();\n// The default `durationThreshold` used across this library for observing\n// `event` entries via PerformanceObserver.\nexport const DEFAULT_DURATION_THRESHOLD = 40;\n// Used to store the interaction count after a bfcache restore, since p98\n// interaction latencies should only consider the current navigation.\nlet prevInteractionCount = 0;\n/**\n * Returns the interaction count since the last bfcache restore (or for the\n * full page lifecycle if there were no bfcache restores).\n */\nconst getInteractionCountForNavigation = () => {\n    return getInteractionCount() - prevInteractionCount;\n};\nexport const resetInteractions = () => {\n    prevInteractionCount = getInteractionCount();\n    longestInteractionList.length = 0;\n    longestInteractionMap.clear();\n};\n/**\n * Returns the estimated p98 longest interaction based on the stored\n * interaction candidates and the interaction count for the current page.\n */\nexport const estimateP98LongestInteraction = () => {\n    const candidateInteractionIndex = Math.min(longestInteractionList.length - 1, Math.floor(getInteractionCountForNavigation() / 50));\n    return longestInteractionList[candidateInteractionIndex];\n};\n// To prevent unnecessary memory usage on pages with lots of interactions,\n// store at most 10 of the longest interactions to consider as INP candidates.\nconst MAX_INTERACTIONS_TO_CONSIDER = 10;\n/**\n * A list of callback functions to run before each entry is processed.\n * Exposing this list allows the attribution build to hook into the\n * entry processing pipeline.\n */\nexport const entryPreProcessingCallbacks = [];\n/**\n * Takes a performance entry and adds it to the list of worst interactions\n * if its duration is long enough to make it among the worst. If the\n * entry is part of an existing interaction, it is merged and the latency\n * and entries list is updated as needed.\n */\nexport const processInteractionEntry = (entry) => {\n    entryPreProcessingCallbacks.forEach((cb) => cb(entry));\n    // Skip further processing for entries that cannot be INP candidates.\n    if (!(entry.interactionId || entry.entryType === 'first-input'))\n        return;\n    // The least-long of the 10 longest interactions.\n    const minLongestInteraction = longestInteractionList[longestInteractionList.length - 1];\n    const existingInteraction = longestInteractionMap.get(entry.interactionId);\n    // Only process the entry if it's possibly one of the ten longest,\n    // or if it's part of an existing interaction.\n    if (existingInteraction ||\n        longestInteractionList.length < MAX_INTERACTIONS_TO_CONSIDER ||\n        entry.duration > minLongestInteraction.latency) {\n        // If the interaction already exists, update it. Otherwise create one.\n        if (existingInteraction) {\n            // If the new entry has a longer duration, replace the old entries,\n            // otherwise add to the array.\n            if (entry.duration > existingInteraction.latency) {\n                existingInteraction.entries = [entry];\n                existingInteraction.latency = entry.duration;\n            }\n            else if (entry.duration === existingInteraction.latency &&\n                entry.startTime === existingInteraction.entries[0].startTime) {\n                existingInteraction.entries.push(entry);\n            }\n        }\n        else {\n            const interaction = {\n                id: entry.interactionId,\n                latency: entry.duration,\n                entries: [entry],\n            };\n            longestInteractionMap.set(interaction.id, interaction);\n            longestInteractionList.push(interaction);\n        }\n        // Sort the entries by latency (descending) and keep only the top ten.\n        longestInteractionList.sort((a, b) => b.latency - a.latency);\n        if (longestInteractionList.length > MAX_INTERACTIONS_TO_CONSIDER) {\n            longestInteractionList\n                .splice(MAX_INTERACTIONS_TO_CONSIDER)\n                .forEach((i) => longestInteractionMap.delete(i.id));\n        }\n    }\n};\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { onBFCacheRestore } from './lib/bfcache.js';\nimport { bindReporter } from './lib/bindReporter.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { DEFAULT_DURATION_THRESHOLD, processInteractionEntry, estimateP98LongestInteraction, resetInteractions, } from './lib/interactions.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\nimport { initInteractionCountPolyfill } from './lib/polyfills/interactionCountPolyfill.js';\nimport { whenActivated } from './lib/whenActivated.js';\nimport { whenIdle } from './lib/whenIdle.js';\n/** Thresholds for INP. See https://web.dev/articles/inp#what_is_a_good_inp_score */\nexport const INPThresholds = [200, 500];\n/**\n * Calculates the [INP](https://web.dev/articles/inp) value for the current\n * page and calls the `callback` function once the value is ready, along with\n * the `event` performance entries reported for that interaction. The reported\n * value is a `DOMHighResTimeStamp`.\n *\n * A custom `durationThreshold` configuration option can optionally be passed to\n * control what `event-timing` entries are considered for INP reporting. The\n * default threshold is `40`, which means INP scores of less than 40 are\n * reported as 0. Note that this will not affect your 75th percentile INP value\n * unless that value is also less than 40 (well below the recommended\n * [good](https://web.dev/articles/inp#what_is_a_good_inp_score) threshold).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** INP should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nexport const onINP = (onReport, opts) => {\n    // Return if the browser doesn't support all APIs needed to measure INP.\n    if (!('PerformanceEventTiming' in self &&\n        'interactionId' in PerformanceEventTiming.prototype)) {\n        return;\n    }\n    // Set defaults\n    opts = opts || {};\n    whenActivated(() => {\n        // TODO(philipwalton): remove once the polyfill is no longer needed.\n        initInteractionCountPolyfill();\n        let metric = initMetric('INP');\n        let report;\n        const handleEntries = (entries) => {\n            // Queue the `handleEntries()` callback in the next idle task.\n            // This is needed to increase the chances that all event entries that\n            // occurred between the user interaction and the next paint\n            // have been dispatched. Note: there is currently an experiment\n            // running in Chrome (EventTimingKeypressAndCompositionInteractionId)\n            // 123+ that if rolled out fully may make this no longer necessary.\n            whenIdle(() => {\n                entries.forEach(processInteractionEntry);\n                const inp = estimateP98LongestInteraction();\n                if (inp && inp.latency !== metric.value) {\n                    metric.value = inp.latency;\n                    metric.entries = inp.entries;\n                    report();\n                }\n            });\n        };\n        const po = observe('event', handleEntries, {\n            // Event Timing entries have their durations rounded to the nearest 8ms,\n            // so a duration of 40ms would be any event that spans 2.5 or more frames\n            // at 60Hz. This threshold is chosen to strike a balance between usefulness\n            // and performance. Running this callback for any interaction that spans\n            // just one or two frames is likely not worth the insight that could be\n            // gained.\n            durationThreshold: opts.durationThreshold ?? DEFAULT_DURATION_THRESHOLD,\n        });\n        report = bindReporter(onReport, metric, INPThresholds, opts.reportAllChanges);\n        if (po) {\n            // Also observe entries of type `first-input`. This is useful in cases\n            // where the first interaction is less than the `durationThreshold`.\n            po.observe({ type: 'first-input', buffered: true });\n            onHidden(() => {\n                handleEntries(po.takeRecords());\n                report(true);\n            });\n            // Only report after a bfcache restore if the `PerformanceObserver`\n            // successfully registered.\n            onBFCacheRestore(() => {\n                resetInteractions();\n                metric = initMetric('INP');\n                report = bindReporter(onReport, metric, INPThresholds, opts.reportAllChanges);\n            });\n        }\n    });\n};\n"],"names":["bfcacheRestoreTime","getBFCacheRestoreTime","onBFCacheRestore","cb","addEventListener","event","persisted","timeStamp","bindReporter","callback","metric","thresholds","reportAllChanges","prevValue","delta","forceReport","value","undefined","rating","getRating","getActivationStart","navEntry","getNavigationEntry","activationStart","navigationEntry","self","performance","getEntriesByType","responseStart","now","initMetric","name","navigationType","document","prerendering","wasDiscarded","type","replace","entries","id","Date","Math","floor","random","observe","opts","PerformanceObserver","supportedEntryTypes","includes","po","list","Promise","resolve","then","getEntries","Object","assign","buffered","e","onHidden","visibilityState","runOnce","called","whenActivated","whenIdle","rIC","requestIdleCallback","setTimeout","handle","interactionCountEstimate","minKnownInteractionId","Infinity","maxKnownInteractionId","updateEstimate","forEach","interactionId","min","max","getInteractionCount","interactionCount","initInteractionCountPolyfill","durationThreshold","longestInteractionList","longestInteractionMap","Map","prevInteractionCount","estimateP98LongestInteraction","candidateInteractionIndex","length","entryPreProcessingCallbacks","processInteractionEntry","entry","entryType","minLongestInteraction","existingInteraction","get","duration","latency","startTime","push","interaction","set","sort","a","b","splice","i","delete","INPThresholds","onINP","onReport","PerformanceEventTiming","prototype","report","handleEntries","inp","takeRecords","clear"],"sourceRoot":""}