{"version":3,"file":"static/js/799.16b92207.chunk.js","mappings":"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","sources":["../node_modules/web-vitals/dist/modules/lib/bfcache.js","../node_modules/web-vitals/dist/modules/lib/bindReporter.js","../node_modules/web-vitals/dist/modules/lib/doubleRAF.js","../node_modules/web-vitals/dist/modules/lib/getActivationStart.js","../node_modules/web-vitals/dist/modules/lib/getNavigationEntry.js","../node_modules/web-vitals/dist/modules/lib/getVisibilityWatcher.js","../node_modules/web-vitals/dist/modules/lib/initMetric.js","../node_modules/web-vitals/dist/modules/lib/generateUniqueID.js","../node_modules/web-vitals/dist/modules/lib/observe.js","../node_modules/web-vitals/dist/modules/lib/onHidden.js","../node_modules/web-vitals/dist/modules/lib/runOnce.js","../node_modules/web-vitals/dist/modules/lib/whenActivated.js","../node_modules/web-vitals/dist/modules/onCLS.js","../node_modules/web-vitals/dist/modules/onFCP.js"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet bfcacheRestoreTime = -1;\nexport const getBFCacheRestoreTime = () => bfcacheRestoreTime;\nexport const onBFCacheRestore = (cb) => {\n    addEventListener('pageshow', (event) => {\n        if (event.persisted) {\n            bfcacheRestoreTime = event.timeStamp;\n            cb(event);\n        }\n    }, true);\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst getRating = (value, thresholds) => {\n    if (value > thresholds[1]) {\n        return 'poor';\n    }\n    if (value > thresholds[0]) {\n        return 'needs-improvement';\n    }\n    return 'good';\n};\nexport const bindReporter = (callback, metric, thresholds, reportAllChanges) => {\n    let prevValue;\n    let delta;\n    return (forceReport) => {\n        if (metric.value >= 0) {\n            if (forceReport || reportAllChanges) {\n                delta = metric.value - (prevValue || 0);\n                // Report the metric if there's a non-zero delta or if no previous\n                // value exists (which can happen in the case of the document becoming\n                // hidden when the metric value is 0).\n                // See: https://github.com/GoogleChrome/web-vitals/issues/14\n                if (delta || prevValue === undefined) {\n                    prevValue = metric.value;\n                    metric.delta = delta;\n                    metric.rating = getRating(metric.value, thresholds);\n                    callback(metric);\n                }\n            }\n        }\n    };\n};\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const doubleRAF = (cb) => {\n    requestAnimationFrame(() => requestAnimationFrame(() => cb()));\n};\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getNavigationEntry } from './getNavigationEntry.js';\nexport const getActivationStart = () => {\n    const navEntry = getNavigationEntry();\n    return (navEntry && navEntry.activationStart) || 0;\n};\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const getNavigationEntry = () => {\n    const navigationEntry = self.performance &&\n        performance.getEntriesByType &&\n        performance.getEntriesByType('navigation')[0];\n    // Check to ensure the `responseStart` property is present and valid.\n    // In some cases no value is reported by the browser (for\n    // privacy/security reasons), and in other cases (bugs) the value is\n    // negative or is larger than the current page time. Ignore these cases:\n    // https://github.com/GoogleChrome/web-vitals/issues/137\n    // https://github.com/GoogleChrome/web-vitals/issues/162\n    // https://github.com/GoogleChrome/web-vitals/issues/275\n    if (navigationEntry &&\n        navigationEntry.responseStart > 0 &&\n        navigationEntry.responseStart < performance.now()) {\n        return navigationEntry;\n    }\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { onBFCacheRestore } from './bfcache.js';\nlet firstHiddenTime = -1;\nconst initHiddenTime = () => {\n    // If the document is hidden when this code runs, assume it was always\n    // hidden and the page was loaded in the background, with the one exception\n    // that visibility state is always 'hidden' during prerendering, so we have\n    // to ignore that case until prerendering finishes (see: `prerenderingchange`\n    // event logic below).\n    return document.visibilityState === 'hidden' && !document.prerendering\n        ? 0\n        : Infinity;\n};\nconst onVisibilityUpdate = (event) => {\n    // If the document is 'hidden' and no previous hidden timestamp has been\n    // set, update it based on the current event data.\n    if (document.visibilityState === 'hidden' && firstHiddenTime > -1) {\n        // If the event is a 'visibilitychange' event, it means the page was\n        // visible prior to this change, so the event timestamp is the first\n        // hidden time.\n        // However, if the event is not a 'visibilitychange' event, then it must\n        // be a 'prerenderingchange' event, and the fact that the document is\n        // still 'hidden' from the above check means the tab was activated\n        // in a background state and so has always been hidden.\n        firstHiddenTime = event.type === 'visibilitychange' ? event.timeStamp : 0;\n        // Remove all listeners now that a `firstHiddenTime` value has been set.\n        removeChangeListeners();\n    }\n};\nconst addChangeListeners = () => {\n    addEventListener('visibilitychange', onVisibilityUpdate, true);\n    // IMPORTANT: when a page is prerendering, its `visibilityState` is\n    // 'hidden', so in order to account for cases where this module checks for\n    // visibility during prerendering, an additional check after prerendering\n    // completes is also required.\n    addEventListener('prerenderingchange', onVisibilityUpdate, true);\n};\nconst removeChangeListeners = () => {\n    removeEventListener('visibilitychange', onVisibilityUpdate, true);\n    removeEventListener('prerenderingchange', onVisibilityUpdate, true);\n};\nexport const getVisibilityWatcher = () => {\n    if (firstHiddenTime < 0) {\n        // If the document is hidden when this code runs, assume it was hidden\n        // since navigation start. This isn't a perfect heuristic, but it's the\n        // best we can do until an API is available to support querying past\n        // visibilityState.\n        firstHiddenTime = initHiddenTime();\n        addChangeListeners();\n        // Reset the time on bfcache restores.\n        onBFCacheRestore(() => {\n            // Schedule a task in order to track the `visibilityState` once it's\n            // had an opportunity to change to visible in all browsers.\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1133363\n            setTimeout(() => {\n                firstHiddenTime = initHiddenTime();\n                addChangeListeners();\n            }, 0);\n        });\n    }\n    return {\n        get firstHiddenTime() {\n            return firstHiddenTime;\n        },\n    };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getBFCacheRestoreTime } from './bfcache.js';\nimport { generateUniqueID } from './generateUniqueID.js';\nimport { getActivationStart } from './getActivationStart.js';\nimport { getNavigationEntry } from './getNavigationEntry.js';\nexport const initMetric = (name, value) => {\n    const navEntry = getNavigationEntry();\n    let navigationType = 'navigate';\n    if (getBFCacheRestoreTime() >= 0) {\n        navigationType = 'back-forward-cache';\n    }\n    else if (navEntry) {\n        if (document.prerendering || getActivationStart() > 0) {\n            navigationType = 'prerender';\n        }\n        else if (document.wasDiscarded) {\n            navigationType = 'restore';\n        }\n        else if (navEntry.type) {\n            navigationType = navEntry.type.replace(/_/g, '-');\n        }\n    }\n    // Use `entries` type specific for the metric.\n    const entries = [];\n    return {\n        name,\n        value: typeof value === 'undefined' ? -1 : value,\n        rating: 'good', // If needed, will be updated when reported. `const` to keep the type from widening to `string`.\n        delta: 0,\n        entries,\n        id: generateUniqueID(),\n        navigationType,\n    };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Performantly generate a unique, 30-char string by combining a version\n * number, the current timestamp with a 13-digit number integer.\n * @return {string}\n */\nexport const generateUniqueID = () => {\n    return `v4-${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport const observe = (type, callback, opts) => {\n    try {\n        if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n            const po = new PerformanceObserver((list) => {\n                // Delay by a microtask to workaround a bug in Safari where the\n                // callback is invoked immediately, rather than in a separate task.\n                // See: https://github.com/GoogleChrome/web-vitals/issues/277\n                Promise.resolve().then(() => {\n                    callback(list.getEntries());\n                });\n            });\n            po.observe(Object.assign({\n                type,\n                buffered: true,\n            }, opts || {}));\n            return po;\n        }\n    }\n    catch (e) {\n        // Do nothing.\n    }\n    return;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const onHidden = (cb) => {\n    document.addEventListener('visibilitychange', () => {\n        if (document.visibilityState === 'hidden') {\n            cb();\n        }\n    });\n};\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const runOnce = (cb) => {\n    let called = false;\n    return () => {\n        if (!called) {\n            cb();\n            called = true;\n        }\n    };\n};\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const whenActivated = (callback) => {\n    if (document.prerendering) {\n        addEventListener('prerenderingchange', () => callback(), true);\n    }\n    else {\n        callback();\n    }\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { onBFCacheRestore } from './lib/bfcache.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { bindReporter } from './lib/bindReporter.js';\nimport { doubleRAF } from './lib/doubleRAF.js';\nimport { onHidden } from './lib/onHidden.js';\nimport { runOnce } from './lib/runOnce.js';\nimport { onFCP } from './onFCP.js';\n/** Thresholds for CLS. See https://web.dev/articles/cls#what_is_a_good_cls_score */\nexport const CLSThresholds = [0.1, 0.25];\n/**\n * Calculates the [CLS](https://web.dev/articles/cls) value for the current page and\n * calls the `callback` function once the value is ready to be reported, along\n * with all `layout-shift` performance entries that were used in the metric\n * value calculation. The reported value is a `double` (corresponding to a\n * [layout shift score](https://web.dev/articles/cls#layout_shift_score)).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** CLS should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nexport const onCLS = (onReport, opts) => {\n    // Set defaults\n    opts = opts || {};\n    // Start monitoring FCP so we can only report CLS if FCP is also reported.\n    // Note: this is done to match the current behavior of CrUX.\n    onFCP(runOnce(() => {\n        let metric = initMetric('CLS', 0);\n        let report;\n        let sessionValue = 0;\n        let sessionEntries = [];\n        const handleEntries = (entries) => {\n            entries.forEach((entry) => {\n                // Only count layout shifts without recent user input.\n                if (!entry.hadRecentInput) {\n                    const firstSessionEntry = sessionEntries[0];\n                    const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n                    // If the entry occurred less than 1 second after the previous entry\n                    // and less than 5 seconds after the first entry in the session,\n                    // include the entry in the current session. Otherwise, start a new\n                    // session.\n                    if (sessionValue &&\n                        entry.startTime - lastSessionEntry.startTime < 1000 &&\n                        entry.startTime - firstSessionEntry.startTime < 5000) {\n                        sessionValue += entry.value;\n                        sessionEntries.push(entry);\n                    }\n                    else {\n                        sessionValue = entry.value;\n                        sessionEntries = [entry];\n                    }\n                }\n            });\n            // If the current session value is larger than the current CLS value,\n            // update CLS and the entries contributing to it.\n            if (sessionValue > metric.value) {\n                metric.value = sessionValue;\n                metric.entries = sessionEntries;\n                report();\n            }\n        };\n        const po = observe('layout-shift', handleEntries);\n        if (po) {\n            report = bindReporter(onReport, metric, CLSThresholds, opts.reportAllChanges);\n            onHidden(() => {\n                handleEntries(po.takeRecords());\n                report(true);\n            });\n            // Only report after a bfcache restore if the `PerformanceObserver`\n            // successfully registered.\n            onBFCacheRestore(() => {\n                sessionValue = 0;\n                metric = initMetric('CLS', 0);\n                report = bindReporter(onReport, metric, CLSThresholds, opts.reportAllChanges);\n                doubleRAF(() => report());\n            });\n            // Queue a task to report (if nothing else triggers a report first).\n            // This allows CLS to be reported as soon as FCP fires when\n            // `reportAllChanges` is true.\n            setTimeout(report, 0);\n        }\n    }));\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { onBFCacheRestore } from './lib/bfcache.js';\nimport { bindReporter } from './lib/bindReporter.js';\nimport { doubleRAF } from './lib/doubleRAF.js';\nimport { getActivationStart } from './lib/getActivationStart.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { whenActivated } from './lib/whenActivated.js';\n/** Thresholds for FCP. See https://web.dev/articles/fcp#what_is_a_good_fcp_score */\nexport const FCPThresholds = [1800, 3000];\n/**\n * Calculates the [FCP](https://web.dev/articles/fcp) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `paint` performance entry used to determine the value. The reported\n * value is a `DOMHighResTimeStamp`.\n */\nexport const onFCP = (onReport, opts) => {\n    // Set defaults\n    opts = opts || {};\n    whenActivated(() => {\n        const visibilityWatcher = getVisibilityWatcher();\n        let metric = initMetric('FCP');\n        let report;\n        const handleEntries = (entries) => {\n            entries.forEach((entry) => {\n                if (entry.name === 'first-contentful-paint') {\n                    po.disconnect();\n                    // Only report if the page wasn't hidden prior to the first paint.\n                    if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n                        // The activationStart reference is used because FCP should be\n                        // relative to page activation rather than navigation start if the\n                        // page was prerendered. But in cases where `activationStart` occurs\n                        // after the FCP, this time should be clamped at 0.\n                        metric.value = Math.max(entry.startTime - getActivationStart(), 0);\n                        metric.entries.push(entry);\n                        report(true);\n                    }\n                }\n            });\n        };\n        const po = observe('paint', handleEntries);\n        if (po) {\n            report = bindReporter(onReport, metric, FCPThresholds, opts.reportAllChanges);\n            // Only report after a bfcache restore if the `PerformanceObserver`\n            // successfully registered or the `paint` entry exists.\n            onBFCacheRestore((event) => {\n                metric = initMetric('FCP');\n                report = bindReporter(onReport, metric, FCPThresholds, opts.reportAllChanges);\n                doubleRAF(() => {\n                    metric.value = performance.now() - event.timeStamp;\n                    report(true);\n                });\n            });\n        }\n    });\n};\n"],"names":["bfcacheRestoreTime","getBFCacheRestoreTime","onBFCacheRestore","cb","addEventListener","event","persisted","timeStamp","bindReporter","callback","metric","thresholds","reportAllChanges","prevValue","delta","forceReport","value","undefined","rating","getRating","doubleRAF","requestAnimationFrame","getActivationStart","navEntry","getNavigationEntry","activationStart","navigationEntry","self","performance","getEntriesByType","responseStart","now","firstHiddenTime","initHiddenTime","document","visibilityState","prerendering","Infinity","onVisibilityUpdate","type","removeChangeListeners","addChangeListeners","removeEventListener","getVisibilityWatcher","setTimeout","initMetric","name","navigationType","wasDiscarded","replace","entries","id","Date","Math","floor","random","observe","opts","PerformanceObserver","supportedEntryTypes","includes","po","list","Promise","resolve","then","getEntries","Object","assign","buffered","e","onHidden","runOnce","called","whenActivated","CLSThresholds","onCLS","onReport","onFCP","report","sessionValue","sessionEntries","handleEntries","forEach","entry","hadRecentInput","firstSessionEntry","lastSessionEntry","length","startTime","push","takeRecords","FCPThresholds","visibilityWatcher","disconnect","max"],"sourceRoot":""}